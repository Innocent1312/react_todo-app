{"version":3,"sources":["components/TodoHeaderSection/index.js","components/TodoHeaderSection/TodoHeaderSection.js","components/TodoMainSection/TodoItem.js","components/TodoMainSection/TodoList.js","components/TodoMainSection/index.js","components/TodoMainSection/TodoMainSection.js","components/TodoFooterSection/TodoFilters.js","components/TodoFooterSection/index.js","components/TodoFooterSection/TodoFooterSection.js","App.js","index.js"],"names":["TodoHeaderSection","state","title","setTitle","event","target","value","_this","setState","validateForm","preventDefault","addTodo","props","trim","id","Date","completed","render","react_default","a","createElement","className","onSubmit","placeholder","type","onChange","Component","TodoItem","_ref","todo","onToggled","onDeleted","cn","htmlFor","concat","checked","onClick","TodoList","items","onToggledTodo","onDeletedTodo","map","item","TodoMainSection_TodoItem","key","TodoMainSection","todoList","filteredTodoList","onCompletedTodo","onCompletedList","checkOnComplete","every","TodoMainSection_TodoList","TodoFilters","onFilter","selectedFilter","Object","values","filterTypes","filter","href","TodoFooterSection","currentFilter","onClearedList","onSetFilter","completedTodos","length","TodoFooterSection_TodoFilters","some","all","active","App","toConsumableArray","deleteTodo","todoId","clearAllCompleted","setFilter","filterTodos","markTodoCompleted","objectSpread2","markListCompleted","_this$state","components_TodoHeaderSection","Fragment","components_TodoMainSection","components_TodoFooterSection","ReactDOM","App_App","document","getElementById"],"mappings":"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","file":"static/js/main.fcbb45ae.chunk.js","sourcesContent":["import TodoHeaderSection from './TodoHeaderSection';\n\nexport default TodoHeaderSection;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class TodoHeaderSection extends Component {\n  state = {\n    title: '',\n  };\n\n  setTitle = (event) => {\n    const title = event.target.value;\n\n    this.setState({\n      title,\n    });\n  };\n\n  validateForm = (event) => {\n    event.preventDefault();\n    const { addTodo } = this.props;\n\n    this.setState((state) => {\n      if (state.title.trim() === '') {\n        return '';\n      }\n\n      addTodo({\n        id: +new Date(),\n        title: state.title,\n        completed: false,\n      });\n\n      return {\n        title: '',\n      };\n    });\n  };\n\n  render = () => {\n    const { title } = this.state;\n\n    return (\n      <header className=\"header\">\n        <h1>todos</h1>\n\n        <form onSubmit={this.validateForm}>\n          <input\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n            type=\"text\"\n            onChange={this.setTitle}\n            value={title}\n          />\n        </form>\n      </header>\n    );\n  };\n}\n\nTodoHeaderSection.propTypes = {\n  addTodo: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\n\nconst TodoItem = ({ todo, onToggled, onDeleted }) => (\n  <li className={cn(todo.completed && 'completed')}>\n    <div className=\"view\">\n      <label\n        className={cn(todo.completed && 'checked')}\n        htmlFor={`todo-${todo.id}`}\n      >\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          onChange={onToggled}\n          checked={todo.completed}\n          id={`todo-${todo.id}`}\n        />\n\n        {todo.title}\n      </label>\n\n      <button\n        type=\"button\"\n        className=\"destroy\"\n        onClick={onDeleted}\n      />\n    </div>\n  </li>\n);\n\nTodoItem.propTypes = {\n  todo: PropTypes.shape({\n    id: PropTypes.number,\n    title: PropTypes.string,\n    completed: PropTypes.bool,\n  }).isRequired,\n  onToggled: PropTypes.func.isRequired,\n  onDeleted: PropTypes.func.isRequired,\n};\n\nexport default TodoItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TodoItem from './TodoItem';\n\nconst TodoList = ({ items, onToggledTodo, onDeletedTodo }) => (\n  <ul className=\"todo-list\">\n    {items.map(item => (\n      <TodoItem\n        key={item.id}\n        todo={item}\n        onToggled={() => onToggledTodo(item.id)}\n        onDeleted={() => onDeletedTodo(item.id)}\n      />\n    ))}\n  </ul>\n);\n\nTodoList.propTypes = {\n  items: PropTypes.arrayOf(PropTypes.object).isRequired,\n  onToggledTodo: PropTypes.func.isRequired,\n  onDeletedTodo: PropTypes.func.isRequired,\n};\n\nexport default TodoList;\n","import TodoMainSection from './TodoMainSection';\n\nexport default TodoMainSection;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\nimport TodoList from './TodoList';\n\nconst TodoMainSection = (props) => {\n  const {\n    todoList,\n    filteredTodoList,\n    onCompletedTodo,\n    onDeletedTodo,\n    onCompletedList,\n  } = props;\n\n  const checkOnComplete = todoList.every(todo => todo.completed);\n\n  return (\n    <section className=\"main\">\n      <label\n        className={cn(checkOnComplete ? 'label-checked-all' : 'label')}\n        htmlFor=\"toggle-all\"\n      >\n        <input\n          type=\"checkbox\"\n          id=\"toggle-all\"\n          className=\"toggle-all\"\n          onChange={onCompletedList}\n          checked={checkOnComplete}\n        />\n          Mark all as complete\n      </label>\n\n      <TodoList\n        items={filteredTodoList}\n        onToggledTodo={onCompletedTodo}\n        onDeletedTodo={onDeletedTodo}\n      />\n    </section>\n  );\n};\n\nTodoMainSection.propTypes = {\n  todoList: PropTypes.arrayOf(PropTypes.object).isRequired,\n  filteredTodoList: PropTypes.arrayOf(PropTypes.object).isRequired,\n  onDeletedTodo: PropTypes.func.isRequired,\n  onCompletedTodo: PropTypes.func.isRequired,\n  onCompletedList: PropTypes.func.isRequired,\n};\n\nexport default TodoMainSection;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\nimport { filterTypes } from '../../App';\n\nconst TodoFilters = ({ onFilter, selectedFilter }) => (\n  <ul className=\"filters\">\n    {Object.values(filterTypes).map(filter => (\n      <li key={filter}>\n        <a\n          href={`#/${filter}`}\n          className={cn(selectedFilter === filter && 'selected')}\n          onClick={() => onFilter(filter)}\n        >\n          {filter}\n        </a>\n      </li>\n    ))}\n  </ul>\n);\n\nTodoFilters.propTypes = {\n  onFilter: PropTypes.func.isRequired,\n  selectedFilter: PropTypes.string.isRequired,\n};\n\nexport default TodoFilters;\n","import TodoFooterSection from './TodoFooterSection';\n\nexport default TodoFooterSection;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TodoFilters from './TodoFilters';\n\nconst TodoFooterSection = (props) => {\n  const {\n    todoList,\n    currentFilter,\n    onClearedList,\n    onSetFilter,\n  } = props;\n\n  const completedTodos = todoList.filter(todo => !todo.completed).length;\n\n  return (\n    <footer className=\"footer\">\n      <span className=\"todo-count\">\n        {`${completedTodos} items left`}\n      </span>\n\n      <TodoFilters\n        onFilter={onSetFilter}\n        selectedFilter={currentFilter}\n      />\n\n      {todoList.some(todo => todo.completed) && (\n        <button\n          type=\"button\"\n          className=\"clear-completed\"\n          onClick={onClearedList}\n        >\n          Clear completed\n        </button>\n      )}\n    </footer>\n  );\n};\n\nTodoFooterSection.propTypes = {\n  todoList: PropTypes.arrayOf(PropTypes.object).isRequired,\n  currentFilter: PropTypes.string.isRequired,\n  onSetFilter: PropTypes.func.isRequired,\n  onClearedList: PropTypes.func.isRequired,\n};\n\nexport default TodoFooterSection;\n","import React, { Component } from 'react';\nimport TodoHeaderSection from './components/TodoHeaderSection';\nimport TodoMainSection from './components/TodoMainSection';\nimport TodoFooterSection from './components/TodoFooterSection';\n\nexport const filterTypes = {\n  all: 'All',\n  active: 'Active',\n  completed: 'Completed',\n};\n\nexport default class App extends Component {\n  state = {\n    todoList: [],\n    selectedFilter: filterTypes.all,\n  };\n\n  addTodo = (todo) => {\n    this.setState(state => ({\n      todoList: [\n        ...state.todoList,\n        todo,\n      ],\n      selectedFilter: filterTypes.all,\n    }));\n  };\n\n  deleteTodo = (todoId) => {\n    this.setState(state => ({\n      todoList: state.todoList.filter(todo => todo.id !== todoId),\n    }));\n  };\n\n  clearAllCompleted = () => {\n    this.setState(state => ({\n      todoList: state.todoList.filter(todo => !todo.completed),\n    }));\n  };\n\n  setFilter = (filter) => {\n    this.setState({\n      selectedFilter: filter,\n    });\n  };\n\n  filterTodos = () => {\n    switch (this.state.selectedFilter) {\n      case filterTypes.active:\n        return this.state.todoList.filter(todo => !todo.completed);\n      case filterTypes.completed:\n        return this.state.todoList.filter(todo => todo.completed);\n      default:\n        return this.state.todoList.filter(todo => todo.id);\n    }\n  };\n\n  markTodoCompleted = (todoId) => {\n    this.setState(state => ({\n      todoList: state.todoList.map((todo) => {\n        if (todo.id !== todoId) {\n          return todo;\n        }\n\n        return {\n          ...todo,\n          completed: !todo.completed,\n        };\n      }),\n    }));\n  };\n\n  markListCompleted = () => {\n    this.setState((state) => {\n      if (state.todoList.every(todo => todo.completed)) {\n        return {\n          todoList: state.todoList.map(todo => ({\n            ...todo,\n            completed: false,\n          })),\n        };\n      }\n\n      return {\n        todoList: state.todoList.map(todo => ({\n          ...todo,\n          completed: true,\n        })),\n      };\n    });\n  };\n\n  render = () => {\n    const { todoList, selectedFilter } = this.state;\n    const filteredTodoList = this.filterTodos();\n\n    return (\n      <section className=\"todoapp\">\n\n        <TodoHeaderSection\n          addTodo={this.addTodo}\n        />\n\n        {todoList.length > 0 && (\n          <>\n            <TodoMainSection\n              todoList={todoList}\n              onCompletedList={this.markListCompleted}\n              onCompletedTodo={this.markTodoCompleted}\n              onDeletedTodo={this.deleteTodo}\n              filteredTodoList={filteredTodoList}\n            />\n\n            <TodoFooterSection\n              todoList={todoList}\n              currentFilter={selectedFilter}\n              onSetFilter={this.setFilter}\n              onClearedList={this.clearAllCompleted}\n            />\n          </>\n        )}\n\n      </section>\n    );\n  };\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}